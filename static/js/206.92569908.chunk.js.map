{"version":3,"file":"static/js/206.92569908.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.js","components/MoviesList/MoviesList.styled.js","pages/HomePage.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport { Item, List, MovieContainer } from './MoviesList.styled';\n\nexport default function MoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <MovieContainer>\n      <List>\n        {movies.map(movie => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\n                  alt={movie.title}\n                  height=\"300\"\n                />\n              ) : (\n                <img\n                  src=\"https://placehold.it/300x450?text=Image_not_found\"\n                  alt={movie.title || 'Image not found'}\n                  height=\"300\"\n                />\n              )}\n              <Item>{movie.title}</Item>\n            </Link>\n          </li>\n        ))}\n      </List>\n    </MovieContainer>\n  );\n}\n","import styled from 'styled-components';\n\nexport const MovieContainer = styled.div`\n  padding: ${p => p.theme.spacing(3)};\n`;\n\nexport const Title = styled.h2`\n  color: ${p => p.theme.colors.green};\n  margin-bottom: ${p => p.theme.spacing(4)};\n  font-weight: 500;\n  font-size: 30px;\n  text-align: center;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  row-gap: ${p => p.theme.spacing(5)};\n  column-gap: ${p => p.theme.spacing(3)};\n`;\n\nexport const Item = styled.h3`\n  font-size: 24px;\n  font-style: italic;\n  text-decoration: underline;\n  max-width: 300px;\n  overflow-wrap: break-word;\n  text-align: center;\n  &:hover {\n    color: ${p => p.theme.colors.green};\n  }\n`;\n","// HomePage.jsx\nimport { toast } from 'react-hot-toast';\nimport { useState, useEffect } from 'react';\nimport { apiFetchTrendingMovies } from 'api';\nimport { MovieLoader } from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { Title } from '../components/MoviesList/MoviesList.styled';\n\nexport default function HomePage() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        setIsError(false);\n\n        const response = await apiFetchTrendingMovies();\n        const newMovies = response.data.results;\n\n        if (newMovies.length === 0) {\n          toast.error('No movies for your request');\n        } else {\n          setMovies([...newMovies]);\n        }\n      } catch (error) {\n        toast.error('Oops! Something went wrong! Try reloading the page!');\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {isError && <div>Unable to fetch movies. Please try again.</div>}\n\n      {movies.length > 0 && <Title>Trending today</Title>}\n      {movies.length > 0 && <MoviesList movies={movies} />}\n      {isLoading && <MovieLoader />}\n    </div>\n  );\n}\n"],"names":["MoviesList","_ref","movies","location","useLocation","_jsx","MovieContainer","children","List","map","movie","_jsxs","Link","to","concat","id","state","from","poster_path","src","alt","title","height","Item","styled","_templateObject","_taggedTemplateLiteral","p","theme","spacing","Title","_templateObject2","colors","green","_templateObject3","_templateObject4","HomePage","_useState","useState","_useState2","_slicedToArray","setMovies","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isError","setIsError","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","response","newMovies","_context","prev","next","apiFetchTrendingMovies","sent","data","results","length","toast","_toConsumableArray","t0","finish","stop","apply","arguments","MovieLoader"],"sourceRoot":""}